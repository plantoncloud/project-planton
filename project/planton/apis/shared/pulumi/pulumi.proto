syntax = "proto3";

package project.planton.apis.shared.pulumi;

import "buf/validate/validate.proto";
import "project/planton/apis/credential/gitcredential/v1/spec.proto";
import "project/planton/apis/credential/pulumibackendcredential/v1/spec.proto";
import "project/planton/apis/shared/pulumi/enums.proto";

//pulumi stack info
message PulumiStackInfo {
  //pulumi operation
  PulumiOperationType operation = 1;
  //run preview of pulumi operation
  bool preview = 2;
  //pulumi backend
  project.planton.apis.credential.pulumibackendcredential.v1.PulumiBackendCredentialSpec backend = 3;
  //pulumi project
  PulumiProject project = 4;
  //pulumi stack name
  string stack_name = 5;
  //pulumi-module git-repo
  PulumiGitRepo git_repo = 6;
}

//pulumi project
//information required to setup pulumi project https://www.pulumi.com/docs/concepts/projects/project-file/#attributes
message PulumiProject {
  //name of the pulumi project to be used for setting name attribute in Pulumi.yaml
  string name = 1;
  //name of the pulumi project to be used for setting runtime attribute in Pulumi.yaml
  project.planton.apis.shared.pulumi.PulumiProjectRuntime runtime = 2;
}

//pulumi module git-repo
message PulumiGitRepo {
  //url to clone the repository using git
  string clone_url = 1;
  //git branch
  string branch = 2;
  //git commit-sha
  string commit_sha = 3;
  //path of the directory containing the main entry point for the pulumi module inside the git repo
  string project_dir = 4;
  //git-auth for pulumi-module private git-repositories
  project.planton.apis.credential.gitcredential.v1.GitCredentialSpec auth = 5;
}

//stack-job-settings for api-resource
message StackJobSettings {
  //stack-jobs will always require a manual approval before starting execution.
  //this is useful when automatic running of pulumi operations on state changes is not desirable.
  //this control is different from 'is_disabled_on_lifecycle_events' in the sense that a new stack-job is
  //created on lifecycle events but waits for manual approval to begin executing.
  bool is_manual = 1;
  //disable stack-jobs on api-resource lifecycle events i.e create, update, delete and restore
  //new stack-jobs can still be created by invoking createStackJob rpc
  bool is_disabled_on_lifecycle_events = 2;
  // id of pulumi-backend-credential to be used to store state for api-resource's pulumi-stack state
  string pulumi_backend_credential_id = 3;
  //stack-job id-runner to be used to run stack-jobs
  string stack_job_runner_id = 4;
  //key value pairs to configure custom-inputs for the stack-job which are not included in the api-resource spec
  map<string, string> custom_inputs = 5;
  //skip refresh for preview, update and destroy steps.
  //defaults to false.
  //refresh is always executed for all stack-jobs unless disabled.
  bool skip_refresh = 6;
  //always run preview step for update or destroy.
  //defaults to true.
  bool preview_before_update_or_destroy = 7;
  //if the stack-job includes update or destroy and if preview-before-update-or-destroy is enabled,
  // pause after preview is execute but before update/destroy is executed.
  //defaults to false.
  bool pause_between_preview_and_update_or_destroy = 8;
  //id of the pulumi-module
  //default module will be used when this is not specified
  string pulumi_module_id = 9;
}
